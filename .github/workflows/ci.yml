name: IMDB Sentiment Workflow (Demo)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest

    env:
      DAGSHUB_USER: "Dharsh"
      DAGSHUB_TOKEN: "4f3284cea30d20043975370eef81965d94e13fe1"
      DAGSHUB_REPO: "dharsh/imdb-response-demo"
      MLFLOW_TRACKING_URI: "https://dagshub.com/Dharsh/imdb-response-demo.mlflow"

    steps:
      # Checkout full repository so DVC can detect the repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[all] dagshub mlflow

      # Pull datasets from Dagshub
      - name: Pull dataset from Dagshub
        run: dvc pull -r dagshub

      # Run the training script
      - name: Run training
        run: python src/train.py

      # Commit any changes to DVC outputs
      - name: Commit DVC outputs
        run: |
          dvc commit
          git add dvc.lock
          git commit -m "Auto: update model artifacts" || echo "No changes"
          git push origin main

      # Push DVC-tracked artifacts to Dagshub
      - name: Push DVC artifacts to Dagshub
        run: dvc push -r dagshub

